#+TITLE: Parcial Los Muertos Andantes
* Punto A
** Punto 1
*** Modelo de Objetos en Java+Hibernate
   #+BEGIN_SRC java
     // 1. Convertimos la clase a "abstracta" para tener
     // el tipo "predador" y la "normal"
     @Entity
     @Inheritance(strategy=SINGLE_TABLE)
     @DiscriminatorColumn(name="tipo_sobreviviente")
     abstract class Sobreviviente{
         private int carisma;
         private int puntos;
         private int resistencia;
     
         public void atacar(Caminante caminante){
             // ..
         }
     }
     
     @Entity
     @DiscriminatorValue(name="predador")
     class SobrevivientePredador extends Sobreviviente{
         // - Un Predador podría atacar a varios caminantes
         // - Un caminante podría ser atacado por varios caminantes
         @ManyToMany
         private Collection<Caminante> caminantes;
     
         @Override
         public void atacar(Caminante caminante){
             // ..
         }
         public void intentarCapturar(Caminante caminante){
             // ...
         }
     }
     
     // Agregamos esta clase nueva que hereda a Sobreviviente
     // para tener el tipo Predador, y este otro
     @Entity
     @DiscriminatorValue(name="normal")
     class SobrevivienteNormal extends Sobreviviente{
     }
     
     @Entity
     class Grupo{
         private String nombre;
         @OneToMany
         private Collection<Sobreviviente> integrantes;
         @OneToOne
         private Sobreviviente lider;
     
         // - Un lugar puede ser tomado por varios grupos
         // - Es el grupo el que tiene el método tomar(lugar), no los sobrevivientes ni predadores
         @ManyToOne
         Lugar lugar;
     
         public void tomar(Lugar lugar){
             // ...
         }
     }
     
     // -----------------------------------------------------
     class Caminante{
         private int sedDeSangre;
         private boolean somnoliento;
         private int dientes;
     
         public int poderCorrosivo(){
             // ...
         }
         public boolean debil(){
             // ...
         }
     }
     
     // Estrategia de Herencia
     // - Elegimos "SINGLE TABLE" porque las subclases no tienen tantos atributos
     // por tanto habrían pocos campos en NULL
     // - También podríamos haber optado por "TABLE PER CLASS" (tabla por clase concreta)
     // ya que no se requiere consultar por campos de la super_clase "Lugar"
     // - No considero que fuese necesario "JOINED" porque tenemos 3 entidades por tanto..
     // haria 3 joins si se hiciera una "consulta polimórfica" contra "lugares"
     @Entity
     @Inheritance(strategy=SINGLE_TABLE)
     @DiscriminatorColumn(name="tipo_lugar", type=String)
     abstract class Lugar{
         // Un lugar puede tener muchos caminantes
         // y cada caminante puede estar sólo en un lugar a la vez
         @OneToMany
         private Collection<Caminante> caminantes;
     
         public boolean puedeTomarsePor(Grupo grupo){
             // ...
         }
     
         public void intentarTomarPor(Sobreviviente tomador){
             // ...
         }
     
         public void recibirAtaqueDe(Sobreviviente atacante){
             // ...
         }
         public void caotico(){
             // ...
         }
     }
     
     @Entity
     class Prision extends Lugar{
         private int cantidadPabellones;
     
         public boolean superaLaComplejidad(Grupo grupo){
             // ...
         }
         public void extraPorTomarse(Sobreviviente tomador){
             // ...
         }
     }
     
     @Entity
     class Bosque extends Lugar{
         public boolean superaLaComplejidad(Grupo grupo){
             // ...
         }
         public void extraPorTomarse(Sobreviviente tomador){
             // ...
         }
     }
     
     @Entity
     class Granja extends Lugar{
         private int cantidadDeElementosPunzantes;
         private int cantidadDeCercas;
     
         public boolean superaLaComplejidad(Grupo grupo){
             // ...
         }
         public void extraPorTomarse(Sobreviviente tomador){
             // ...
         }
     }
   #+END_SRC
*** Modelo de Datos (DER Fisico)
    #+BEGIN_SRC plantuml :file img/parcial-muertos-andantes-1.png :export results
      @startuml
      title Los Muertos Andantes - Modelo de Datos (DER Físico)
      entity sobrevivientes{
          id
          --
          grupo_id <<FK>>
          tipo_sobreviviente
          carisma
          puntos
          resistencia
      }
      
      note top of sobrevivientes
      Estrategia de Herencia
      ,**SINGLE_TABLE**
      end note
      
      entity grupos{
          id
          --
          lider_id <<FK>>
          lugar_id <<FK>>
          nombre
      }
      
      entity caminantes{
          id
          --
          id_lugar <<FK>>
          sedDeSangre
          somnoliento
          dientes
      }
      
      entity sobrevivienteContraCaminante{
          caminante_id
          sobreviviente_id
      }
      
      entity lugares{
          id 
          --
          tipo_lugar
          cantidadDePabellones
          cantidadDeElementosPunzantes
          cantidadDeCercas
      }
      
      note bottom of lugares
      Estrategia de Herencia
      ,**SINGLE_TABLE**
      end note
      
      
      grupos |o-right-|{ sobrevivientes : integrante
      grupos |o-right-|| sobrevivientes : lider
      
      sobrevivientes   ||-right-o{ sobrevivienteContraCaminante : ataca
      caminantes        ||-up-o{ sobrevivienteContraCaminante   : es_atacado
      
      lugares ||-right-o{ caminantes : tiene
      
      lugares |o-up-o{ grupos    : está en
      
      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:img/parcial-muertos-andantes-1.png]]

** Punto 2
*** Modelo de Objetos en Java+Hibernate
    #+BEGIN_SRC java
      @Entity
      @Inheritance(strategy=SINGLE_TABLE)
      class Sobreviviente{
          private int carisma;
          private int puntos;
          private int resistencia;
      
          // - cada sobreviviente puede tener varias armas
          // - usamos una Lista para mantener el orden
          @OneToMany
          @OrderColumn(name="orden")
          @JoinColumn(name="sobreviviente_id"); // fk en la tabla de armas
          List<Arma> armas;
          
          public void atacar(Caminante caminante){
              // ..
          }
      }
      
      @Entity
      class Arma{
          private int municiones;
          private int calibre;
          private boolean esRuidosa;
      
          public void comprarMuniciones(int cantidad){
              // ...
          }
      }
    #+END_SRC
*** Modelo de Datos (DER Fisico)
    #+BEGIN_SRC plantuml :file img/parcial-muertos-andantes-2.png :export results
      @startuml
      title Los Muertos Andantes - Modelo de Datos (DER Físico)
      entity sobrevivientes{
          id
          --
          grupo_id <<FK>>
          tipo_sobreviviente
          carisma
          puntos
          resistencia
      }
      
      note top of sobrevivientes
      Estrategia de Herencia
      ,**SINGLE_TABLE**
      end note
      
      entity grupos{
          id
          --
          lider_id <<FK>>
          lugar_id <<FK>>
          nombre
      }
      
      entity caminantes{
          id
          --
          id_lugar <<FK>>
          sedDeSangre
          somnoliento
          dientes
      }
      
      entity sobrevivienteContraCaminante{
          caminante_id
          sobreviviente_id
      }
      
      entity lugares{
          id 
          --
          tipo_lugar
          cantidadDePabellones
          cantidadDeElementosPunzantes
          cantidadDeCercas
      }
      
      note bottom of lugares
      Estrategia de Herencia
      ,**SINGLE_TABLE**
      end note
      
      entity armas{
        id
        --
        sobreviviente_id <<FK>>
        orden
        municiones
        calibre
        esRuidosa
      }
      
      sobrevivientes |o-up-o{ armas : tiene
      
      
      
      grupos |o-right-|{ sobrevivientes : integrante
      grupos |o-right-|| sobrevivientes : lider
      
      sobrevivientes   ||-right-o{ sobrevivienteContraCaminante : ataca
      caminantes        ||-up-o{ sobrevivienteContraCaminante   : es_atacado
      
      lugares ||-right-o{ caminantes : tiene
      
      lugares |o-up-o{ grupos    : está en
      
      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:../img/parcial-muertos-andantes2.png]]

** [DOING] Punto 3
*** Código Java
    #+BEGIN_SRC java
      class RepositorioLugares
          metodo habitantesEnGranjasConCaos
          return habitantesRuidosos("Granja")
      
          metodo habitantesEnBosquesConCaos
          return habitantesRuidosos("Bosque")
      
          metodo habitantesEnPrisionConCaos
          return habitantesRuidosos("Prision")
      
          metodo habitantesEnCaos(tipo)
          return em.createQuery("from " + tipo)
          .list()
          .filter(lugar -> lugar.caotico()) // por cada lugar hace un SELECT .. WHERE, podría ya estar como atributo booleano
          .sum(lugar -> lugar.totalHabitantes()) // por cada Lugar caótico hace un SELECT SUM(), podría estar ya precalculado
      
      class Lugar
          metodo totalHabitantes()
          return grupos.sum(
                            grupo -> grupo.totalIntegrantes()
                             )
      class Grupo
          metodo totalIntegrantes()
          return integrantes.size()
      
      
    #+END_SRC
*** Solución - Alternativa #1
    #+BEGIN_QUOTE
    En el *modelo de objetos* agregaría en la clase ~Lugar~ los atributos ~cantidadHabitantes~ y ~esCaotico~,
    quedando en el *modelo de datos* como campos precalculados, pudiendo hacer una única consulta
    de todos los lugares de un tipo y hacer un ~SUM~ de su total de habitantes,
    y filtrar en la misma consulta aquellos que sean *caóticos*
    #+END_QUOTE
    
    #+BEGIN_SRC java
      class RepositorioLugares{
          metodo habitantesEnGranjasConCaos(){
              return habitantesRuidosos("Granja");
          }
      
          metodo habitantesEnBosquesConCaos(){
              return habitantesRuidosos("Bosque");
          }
      
          metodo habitantesEnPrisionConCaos(){
              return habitantesRuidosos("Prision");
          }
      
          // haría una query que tenga la funcion de agregación SUM,
          // y filtre en la query por aquellos lugares que sean caóticos
          metodo habitantesEnCaos(tipo){
              return em.createQuery("SELECT SUM(totalHabitantes) from "+ tipo+ "WHERE esCaotico=true");
          }
      }
      
      class Lugar{
          int totalHabitantes;
          boolean esCaotico;
      }
      
      class Grupo{
          atributo totalIntegrantes;
      }
      
      
      
    #+END_SRC
* Referencias
  1. [[https://docs.google.com/document/d/1mFHo8MmJ_9imDow1C_itWi0T54AveqI16P-Q7vlm87g/edit#][Enunciado]]
  2. [[https://drive.google.com/drive/folders/1RnlFNpUnfBYR4WbsWfLHaFsVDKZzyfZo][Solución]]
