#+TITLE: Clase 3 - ORM
* Impedance Mismatch
  - Es la diferencia entre el *Modelo de Objetos* y el *Modelo de Datos*
  - Es la diferencia entre como ambos modelos resuelven o no distintos problemas

  |------------------------------+----------------------------------------+--------------------------------------------------------------|
  |                              | Modelo de Objetos (Diagrama de Clases) | Modelo de Datos (DER Físico)                                 |
  |------------------------------+----------------------------------------+--------------------------------------------------------------|
  | Tiene Comportamiento         | SI                                     | NO                                                           |
  | Tienen estado                | SI                                     | SI                                                           |
  | Tienen identidad             | SI (/el propio objeto, al definirlo/)  | SI (/pero.. Definiendo la PK el identificador unívoco/)      |
  | Navegación para buscar datos | Más díficil si es una relación de 1..n | Más fácil se guardan referencias de ambos extremos (PK y FK) |
  | Tipos                        | SI + Se puede referenciar a otros Obj  | Algunos + Las referencias son por FK                         |
  | Herencia                     | SI (/para reutilizar comportamiento/)  | NO                                                           |
  |------------------------------+----------------------------------------+--------------------------------------------------------------|
* Conceptos Básicos (JDBC + Driver + Driver JDBC + JPA + ORM)
** Driver
   Es una implementación de un estándar para una DB en particular
** JDBC (Java Database Connectivity)
   Es el estándar para la conexión a una DB, la api (/la usará el framework hibernate/)
** Driver JDBC
   - Es la implementación del estándar (JDBC) para la conexión
   - Es el conector de db (ej. mysql) implementa la conexión de JBC
** JPA (Java Persistence API)
   - Es el estandar que implementan los *Frameworks de ORM* (/Ej. Hibernate/)
   - Tiene las *Interfaces* (/Ej. EntityManager/) y *Annotations* (/@Entity, @Table, .../)
** Frameworks de ORM
*** Conceptos
    - Facilitan el Mapeo Relacional/Consultas/Conexión a la DB
    - Desacopla el *Modelo de objetos* del *Modelo de Datos* (/permite la separación entre ambos/)
    - El ORM que se utiliza en la materia es *Hibernate*
    - Implementan un ~EntityManager~ de (JPA) *Java Persistanse API*
*** Convención Vs Configuración
    #+BEGIN_QUOTE
    Los frameworks que trabajan por *convención* son más flexibles,
    porque te dan un comportamiento por default con las convenciones que ofrecen,
    evitando escribir código de más. Y además permiten sobreescribir ese comportamiento,

    Por ejemplo en Hibernate por convención usa el annotation de ~@Entity~ para las clases,
    y luego al mapear asume que el nombre de la clase será el nombre de la tabla a persistir,
    pero.. podemos sobreescribir ese comportamiento usando el annotation ~@Table~ para darle otro nombre
    #+END_QUOTE
    
    #+BEGIN_QUOTE
    Los frameworks que trabajan por *configuración*, requieren ya tener todo preconfigurado.
    (/Ej. que definamos el nombre de las tablas que se van a crear en la db/)

    Los frameworks que trabajan por *convención* por sobre la *configuración* (/priorizan la convención/) como Hibernate,
    no requieren que definamos la configuración, sólo seguir su convención como los *annotations* que tiene un comportamiento
    por default. Además permiten sobreescribir ese comportamiento dado por default.
    
    Por ejemplo, en Hibernate es opcional poner el nombre de la tabla porque con el annotation ~@Entity~
    el comportamiento del framework es tomar el nombre de la Clase, como nombre de la tabla.
    En caso de querer ponerle otro nombre, podríamos usar el ~@Table~ sobreescribiendo el comportamiento por default.
    #+END_QUOTE
*** Inyección de Dependencias 
     #+BEGIN_QUOTE
     Cuando usamos frameworks, estos inyectan las dependencias que necesitamos en los objetos
     por general se hace con una notación del tipo @nombreNotación
     En Hibernate sería ~@Entity~, las relaciones ~@ManyToMany~, ~@ManyToOne~, ~@OneToMany~
 
     Los frameworks también proveen hacer inyección directo en los atributos.
     En hibernate sería ~@Id~, ~@GeneratedValue~, ...

     Aparece el concepto de *Inversión de Control* (IoC) porque delegamos/cedemos el control al ORM Hibernate.
     Este se encarga de la conexión con la base de datos (/sólo agregamos los datos de conexión en el archivo de config/),
     también nos desentendemos de la creación de tablas el propio framework lo hace por nosotros.
     #+END_QUOTE
*** Frameworks Vs Bibliotecas
     #+BEGIN_QUOTE
     Los *frameworks* se diferencian de las *bibliotecas* porque
     1. Ofrecen *puntos de extensión* para configuraciones específicas (/Ej. los annotations de hibernate, .../)
     2. Definen un *marco/estructura de trabajo* (/Ej. tener la config de la db en tal lugar, .../)
     #+END_QUOTE
* Archivos de Configuración
** persistence.xml
*** Conceptos
   - Se agrega la *conexión a la base de datos* y las *clases que mapea el ORM* (/Ej. entidades/)
   - Se guarda toda la configuración del *ORM*
   - Se agrega en dos rutas
     1. En el main de la app ~main/resources/META-INF~
     2. En los test de la app ~test/resources/META-INF~

   #+BEGIN_QUOTE
   *¿Cómo persistir clases?*
   1. En el archivo java donde tengamos la clases, agregamos el annotation ~@Entity~ previo a definir la clase
   2. En el ~persistence.xml~ le decimos al *JPA* donde buscar esos *annotations*

  Por ejemplo si en la clase ~Jugador~ habíamos agregado el ~@Entity~ entonces en el ~persistence.xml~ agregamos
  ~<class>utn.dds.persistencia.futbol.persistence.Jugador</class>~
   #+END_QUOTE
   
   *Observación:*
   - Es común confundir el nombre del archivo, recordar que es ~persistence.xml~
*** Configuración
     #+BEGIN_SRC xml
       <!-- conexión a la db del "entorno de producción" -->
       <property name="hibernate.connection.driver_class" value="com.myql.jdbc.Driver" />
       <property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/jugadores" />
       <property name="hibernate.connection.username" value="root" />
       <property name="hibernate.connection.password" value="mysql" />

       <!-- conexión a una db en memoria para el "entorno de testing" -->
       <property name="hibernate.connection.driver_class" value="org.hsqldb.jdbcDriver" />
       <property name="hibernate.connection.url" value="jdbc:hsqldb:mem:app-db" />
       <property name="hibernate.connection.username" value="sa" />
       <property name="hibernate.connection.password" value="" />
       <property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />

       <!-- configuración adicional -->
       <property name="hibernate.show_sql" value="true" />
       <property name="hibernate.format_sql" value="true" />
       <property name="use_sql_comments" value="true" />
       <!-- si hay cambios en el código fuente => el orm actualizará el esquema de la db -->
       <property name="hibernate.hbm2ddl.auto" value="auto" />
     #+END_SRC
** pom.xml
   - Para cargar las *dependencias* (/jpa-java8-extras, hsqldb, .../)
   - Usamos ~jpa-java8-extras~ no directamente *hibernate*
   - Para NO testear con la DB del entono de producción, usamos ~hsqldb~ que es una db que se carga en memoria
* Entity Manager
** Conceptos
   - Es el puente para comunicarse con el *framework ORM* (/Ej. Hibernate/)
   - Actúa como un *facade* (/patrón de diseño/) para con el *framework*
** Guardar/Borrar de Caché la Identidad de los Objetos
*** Conceptos
    - El *ORM guarda la identidad de los objetos en caché*
    - Es un objeto que nos sirve para interactuar/pedirle cosas al ORM (/a Hibernate/)
      1. Ejecutar una query
      2. Borra/Traeme tales objetos

    #+BEGIN_QUOTE
    Asegura la *consistencia de los objetos*, porque al buscar dos veces el mismo objeto
    reutiliza el que tiene en caché evitando crear una nueva instancia
    siempre y en cuando no hagamos ~entityManager.clear()~
      
    Si a nivel código con el *entityManager* creamos un objeto, lo persistimos y luego lo buscamos
    entonces el ORM (hibernate) no hará una query con un ~SELECT~ porque recuerda haberlo persistido
    
    Si a nivel código con el *entityManager* buscamos dos ó más veces el mismo objeto,
    entonces el ORM (hibernate) hará sólo 1 vez el ~SELECT~ en la DB,
    porque en la caché recuerda haber buscado ese objeto

    El ORM reconoce la identidad del objeto por la (PK) por la que se lo buscó en la DB
    #+END_QUOTE
   
    |---------------------------------+---------------------------------------------------------------|
    | Método                          | Descripción                                                   |
    |---------------------------------+---------------------------------------------------------------|
    | ~entityManager.clear()~         | Si queremos borrar la caché del entityManager                 |
    | ~entityManager.persist(objeto)~ | Para persistir un object en la db                             |
    |---------------------------------+---------------------------------------------------------------|
    | ~entityManager.rollback()~      | Operación transaccional - Vuelve a un estado anterior         |
    | ~entityManager.commit()~        | Operación transaccional - Confirma un conjunto de operaciones |
    |---------------------------------+---------------------------------------------------------------|
*** Ejemplo 1
    #+BEGIN_SRC java
      // -> pedimos el jugador con id=2
      // -> por tanto el ORM Hibernate hará una query con un SELECT
      Jugador jugadorA = entityManager.find(Jugador.class, new Long(2));
      
      // -> pedimos al mismo jugador con id=2
      // -> el ORM recordará haber buscado esa entidad que tiene id=2,
      // -> y no hará un segunda query con SELECT para buscarlo, usará el que tiene en la caché
      Jugador jugadorB = entityManager.find(Jugador.class, new Long(2));
      
      // -> el resultado será "true"
      System.out.println(jugadorA == jugadorB);
      
      // si hicieramos clear() borraría la caché,
      // por tanto si hacemos otro entityManager.find(), no recordará haberlo buscado y hará otra query con SELECT
      entityManager.clear(); //
      Jugador jugadorC = entityManager.find(Jugador.class, new Long(2));
      
      // -> el resultado será "false"
      System.out.println(jugadorA == jugadorB);
    #+END_SRC
*** Ejemplo 2
    #+BEGIN_SRC java
      public class Main{
          public static void main(String[] args){
              final EntityManager entityManager = PerThreadEntityManagers.getEntityManager();
              EntityTransaction transaction = entityManager.getTransaction();
      
              Jugador fofito = new Jugador();
              fofito.setNombre("fofito");
              transaction.begin();
              entityManager.persist(fofito);
              transaction.commit();
      
              // el ORM no hará una query con SELECT,
              // porque recuerda tener en la caché a este objeto
              Jugador fofito2 = entityManager.find(Jugador.class, fofito.getId());
              System.out.println(fofito.equals(fofito2)); // true
      
              // idem, el ORM no hará una query con SELECT,
              Jugador fofito3 = entityManager.find(Jugador.class, fofito.getId());
              System.out.println(fofito.equals(fofito3)); // true
      
              // obligamos al ORM Hibernate que se olvide de las entidades que guardó en la caché
              entityManager.clear();
              // el ORM hará otra query,
              // porque no tiene en la caché la identidad del object fofito
              Jugador fofito4 = entityManager.find(Jugador.class, fofito.getId());
              System.out.println(fofito.equals(fofito4)); // false
          }
      }
    #+END_SRC
** Interfaces y Clases
*** WithGlobalEntityManager
    - Es una *interfaz* que nos provee al ~entityManager()~ global como *singleton*
    - Se puede *inyectar* la interfaz

    #+BEGIN_SRC java
      // Podemos inyectarlo a los tests
      public class ContextTest extends AbstractPesistanceTest implements WithGlobalEntityManager{
          @Test
          public void contextUp(){
              assertNotNull(entityManager());
          }
      }

      // Podemos inyectarlo a una clase normal
      public class RepositorioJugadores implements WithGlobalEntityManager{
          public void registrar(Jugador jugador){
              entityManager().persist(jugador);
          }
      }
    #+END_SRC
*** PerThreadEntityManagers
    - Es una clase que nos provee el método ~getEntityManager()~ a nivel global como un *singleton*
    - NO necesitamos inyectar ninguna interfaz, sólo creamos una instancia a la clase ~PerThreadEntityManagers~

    #+BEGIN_SRC java
      public class Runner{
          public static void(String[] args){
              final EntityManager entityManager = PerThreadEntityManagers.getEntity.manager();

              // -> pedimos el jugador con id=2
              Jugador jugador = entityManager.find(Jugador.class, new Long(2));
              System.out.printLn(jugador.getId());
              System.out.printLn(jugador.getNombre());

              // -> creamos una consulta con notación sql
              Jugador otroJugador = (Jugador) entityManager
                  .createQuery("FROM Jugador WHERE nombre= 'pepito'")
                  .getSingleResult();
          }
      }
    #+END_SRC
** Métodos
*** find
    - El ORM hará una query con un ~SELECT~ con la clausula ~WHERE~
*** persist
    - El ORM hará una query con ~INSERT~
*** getSingleResult
* Repositorio
  - *Es un objeto* que *conoce las instancias de TODOS los objetos*
  - Consultan a una *base de datos* partir del *entityManager* 
* Annotations
** Conceptos
   Definen el _"como" se van a persistir/guardar las clases_ en la DB
** En las Clases
*** Actualizar Esquema
     #+BEGIN_SRC xml
       <property name="hibernate.show_sql" value="true" />
       <property name="hibernate.format_sql" value="true" />
       <property name="use_sql_comments" value="true" />
       <!-- si hay cambios en el código fuente => el orm actualizará el esquema de la db -->
       <property name="hibernate.hbm2ddl.auto" value="update" />
     #+END_SRC
*** @Table
    - Al agregar ~@Table(name="nuevoNombre")~ al mapear usará la tabla *nuevoNombre*, la creará si no existe
    
    *Observación:*
    - Si existe otra tabla que hace referencia al nombre de tabla anterior, se sugiere cambia el nombre
      de la tabla directo desde la base de datos
*** @Entity
    - Se agrega previo a definir una *clase*
    - Le dice al ORM *Hibernate* que esa clase es una entidad, y al mapear la debe *persistir* en la DB
    - Las clases que le agregemos esto, deben aparecer en el ~resources/META-INF/persistence.xml~
*** [#A] @JoinColumn
    - Soluciona el problema del ORM Hibernate con ~@OneToMany~
    - Evita que se genere la tabla intermedia
    - Se le debe pasar como parámetro el nombre de la (FK)

    #+BEGIN_SRC java
      class Alumno{
          @OneToMany
          @JoinColumn("alumno_id") // <-- soluciona el problema de que NO genere una tabla intermedia
          List<Nota> notas;
          // ...
      }
    #+END_SRC
** En los atributos - Constraints
*** @Id
    - Se agrega previo a definir un atributo
    - Le indica al ORM *Hibernate* que ese atributo será la *Clave Primaria* (PK) de la *Entidad*
*** @GeneratedValue
    - Se agrega previo a definir un atributo
    - Le dice al ORM *Hibernate* que ese atributo será *autonumérico* (/en sql-server es el constraint IDENTITY/)
** Tipo de Relación - Cardinalidad
*** @ManyToMany
    - Genera una tabla intermedia entre dos tablas con la PK y FK
    - El ORM hace automáticamente el mapeo de las clases

    #+BEGIN_QUOTE
    La tabla intermedia que genera el ORM, es sólo a nivel DB osea sólo aparece en el *modelo de datos* (en el DER Físico),
    en el *modelo de objetos* (diagrama de clases) no debería aparecer.
    
    Si se quiere en el modelo de objetos, se debe cambiar el @ManyToMany por la que corresponda
    y generar la nueva Entidad
    
    En el parcial el *Diagrama del DER Físico* _debe figurar la tabla intermedia_ entre las dos entidades
    #+END_QUOTE
*** @ManyToOne
*** @OneToMany
    - (problema) El ORM Hibernate genera una tabla intermedia como si fuese un ~@ManyToMany~
* Estrategias de fetch/traer datos de la Relación
** Conceptos
   El ORM utiliza dos estrategias para traer los datos
   1. Lazy  (ó perozosa)
   2. Eager (ó anciosa)

   #+BEGIN_QUOTE 
   Por default
   - ~@ManyToOne~ usa la estrategia *Eager* (anciosa)
   - ~@OneToMany~ y ~@ManyToMany~ usan la estrategia *Lazy* (perezosa)
   #+END_QUOTE
** Estrategia Lazy (Perezosa)
   - Utilizar cuando una entidad de la relación no se utiliza tanto
   - Evita realizar consultas a tablas de la db que no necesitamos por el momento

   #+BEGIN_QUOTE
   Si en una relación entre dos entidades A y B,
   cuando pedimos (A), se queda esperando a que pidamos (B)

   Por ejemplo, si tenemos una relación *Alumno-Materia*,
   si nos traemos al alumno => entonces esperará a que le pidamos la materia con un ~SELECT~
   #+END_QUOTE
** Estrategia Eager (Anciosa)
   - Utilizar cuando una entidad de la relación se utiliza muy seguido
   - Nos evita el escribir las consultas ~SELECT~ de una tabla de la db

   #+BEGIN_QUOTE
   Si en una relación entre dos entidades A y B,
   cuando pedimos (A) también nos trae (B) sin siquiera pedirlo

   Supongamos que tenemos una relación *Alumno-Materia*,
   si nos traemos al alumno => nos trae también los registros de Materia
   #+END_QUOTE
** Cambiar de estrategia
   Podemos cambiar la estrategia colocando seguido a la relación entre paréntesis ~fech= FetchType.Tipo~

   #+BEGIN_SRC java
     @Entity
     public class Formacion{
         @Id
         @GeneratedValue
         private Long id;

         // por default el ManyToMany usa la estrategia Lazy, pero se puede cambiar a Eager
         @ManyToMany(fetch = FetchType.EAGER)
         private List<Jugador> jugadores = new ArrayList<Jugador>();

         // por default el ManyToOne usa Eager, pero se puede cambiar a Lazy
         //
         // -> cada vez que traiga la formación, traiga también el equipo => lo dejamos Eager
         // -> si la formación no usa siempre el equipo => lo cambiamos Lazy
         @ManyToOne(fetch = FetchType.LAZY)
         private Equipo equipo;
     }
   #+END_SRC
* Transacciones 
** Conceptos
   - El ~commit()~ de una *transacción* confirma el conjunto las operaciones que contiene (/después NO se puede hacer rollback/)
   - El ~rollback()~ de una *transacción* deshace las operaciones que se ejecutaron SOLO a nivel *base de datos*
   - Hacer ~rollback()~ NO cambia el estado de un objeto, para eso se debe borrar la caché con ~entityManager.clear()~
** Implementación en Java
   #+BEGIN_SRC java
     final EntityTransaction transaction = entityManager.getTransaction();
     // el ORM hará una query con un SELECT, buscando por el id=10
     Formacion formacion = entityManager.find(Formacion.class, new Long(10));
     transaction.begin();
     // los cambios que estén a nivel de objetos,
     // el ORM luego al mapear persistirá el modelo de objetos
     // (suponiendo que confirmamos la transacción)
     formacion.setGoles(new Long(11));
     transaction.commit();
     
     transaction.begin();
     formacion.setGoles(new Long(15));
     // - Deshacemos la operación anterior, pero sólo en la base de datos
     // - Si hacemos un print de la formación mostrará 15
     // - Si hacemos un entityManager.find() de éste objeto, entonces mostrará 11
     transaction.rollback();
   #+END_SRC
* Testing
** Convenciones
   - La clase que se ejecuta antes de los tests, utiliza ~@Before~ se lo suele llamar ~setup()~
   - La clase que se ejecuta después de los tests, utiliza ~@After~ se lo suele llamar ~tearDown()~
** Clases + Interfaces
*** AbstractPersistenceTest
    - Está incluida en la dependencia ~jpa-extra-tools~
    - Incorpora el iniciar una transacción en el ~@Before~ para que considere todos los tests como una única operación
    - Integra rollback en el ~@After~ para que no se modifique la base de datos luego de ejecutarse los tests

    #+BEGIN_SRC java
      public abstract class AbstractPersistenceTest implements TransactionalOps, EntityManager{
          public AbstractPersistenceTest(){
          }
      
          @Before
          public void setup(){ this.beginTransaction(); }
      
          @After
          public void tearDown(){ this.rollbackTransaction(); }
      }
    #+END_SRC
** Ejemplo en Java
*** Clases a Testear
    #+BEGIN_QUOTE
    Podemos hacer que las clases que vamos a testear, implementen la interfaz ~WithGlobalEntityManager~
    y nos evitamos tener que crear la instancia a la clase ~PerThreadEntityManagers~ que también
    nos daba el ~entityManager~

    Si vamos a testear el modelo de objetos con hibernate, la idea sería que las clases
    utilicen el ~entityManager~ para persistir información con ~entityManager.persist(objeto)~
    ó hacer consultas como ~entityManager.find(NombreDeLaClase.class, valorDelId)~
    ó también usar el ~entityManager().createQuery()~ para consultas más específicas seguido de algún método
    del ORM para obtener el resultado Ej. ~getResultList()~
    #+END_QUOTE
      
    #+BEGIN_SRC java
      /*
       ,* Archivo: RepositorioJugadores.java
       ,*/
      import java.util.List;
      import org.uqbarproject.jpa.java8.extras.WithGlobalEntityManager;
      
      // Podemos hacer que implementen esta interfaz "WithGlobalEntityManager "
      public class RepositorioJugadores implements WithGlobalEntityManager {
          public void registrar(Jugador jugador) {
              entityManager().persist(jugador);
          }
      
          public List<Jugador> todos() {
              return entityManager()
                  .createQuery("from Jugador")
                  .getResultList();
          }
      
          public List<Jugador> filtrarPorNombre(String nombre) {
              return entityManager()
                  .createQuery("from Jugador where nombre = :nombre")
                  .setParameter("nombre", nombre)
                  .getResultList();
          }
      }
    #+END_SRC
*** Modulo de tests + FIXTURE
   #+BEGIN_SRC java
     // - La clase "AbstractPersistenceTest" viene de la dependencia "jpa-extra-tool"
     // - Inyectamos la dependencia entityManager() por Interfaz, al implementar WithGlobalEntityManager
     public RepositorioJugadorTest extends AbstractPersistenceTest implements WithGlobalEntityManager{
         @Before
         public void init(){
             // armamos el fixture
             entityManager().persist(crearJugador("carlitos"));
             entityManager().persist(crearJugador("pedrito"));
             entityManager().persist(crearJugador("sebas"));
         }
     
         @Test
         public void testFiltrarPorNombre(){
             RepositorioJugadores repositorioJugadores = new RepositorioJugadores();
             final List<Jugador> jugadores = repositorioJugadores.filtrarPorNombre("marcos");
             Assert.assertEquals(2, jugadores.size());
     
             Assert.assertEquals("marcos", jugadores.get(0).getNombre());
             Assert.assertEquals("marcos", jugadores.get(1).getNombre());
         }
     
         private Jugador crearJugador(String nombre){
             Jugador jugador = new Jugador();
             jugador.setNombre(nombre);
             return jugador;
         }
     
     
         /**
          ,* - En la clase de jpa-extra-tools llamada AbstractPersistenceTest, viene por defecto lo siguiente
          ,* - Si las clases de nuestros tests la extienden, ya incorpora el iniciar la transacción en el @Before
          ,* y luego hacer el rollback en el @After para que los cambios NO persistan en la base de datos
          ,* (porque la idea de los tests, no es generar efecto en la base de datos)
          ,*/
         /*
         @Before
         public void setup(){ this.beginTransaction(); }
     
         @After
         public void tearDown(){ this.rollbackTransaction(); }
         ,*/
     }
   #+END_SRC
* Ejemplos en Java
** Persistir Atributos LocalDate
   - Según la versión de ORM de hibernate puede no tener esta opción
   - El jpa-extra-tools provee ~@Convert(convertor=tipo.class)~

   #+BEGIN_SRC java
     @Entity
     public class Libro extends PersistentEntity{
         protected Libro(){ }

         @Convert(converter = LocalDateConverter.class) // <--
         private LocalDate fechaEdicion;

         @Convert(converter = LocalDatetimeConverter.class) // <--
         private LocalDateTime fechaHoraDestruccion;
     }
   #+END_SRC
** Crear una entidad con PK Autonumérica
*** Cuando y Porque
    #+BEGIN_QUOTE
    *Problema:*
    Si tenemos 3 relaciones que tienen como identificador único
    - jugador_id
    - partido_id
    - paleta_id

    *Solución incorrecta:*
    - Estaría MAL, si creamos una tabla *Participación* que tenga como PK compuesta a los tres campos
      porque no lo representan
    - Si creamos una PK con los tres, forzamos el persistir en el *modelo de datos* una entidad
      que NO existe en el *modelo de objetos*

    *Tips:*
    - Validar si lo que queremos persistir en el *modelo de datos* exista en el *modelo de objetos*    
    #+END_QUOTE

    #+BEGIN_SRC java
      // Solución mal encaminada
      class Participacion{
          partido_id;
          paleta_id;
          jugador_id;
      }
      
      // Solución bien encaminada: (al menos para el ORM Hibernate)
      class Partido{
          @OneToMany
          List<Participacion> participaciones;
          // ...
      }
      
      class Participacion{
          @Id
          private Long id;
      
          @ManyToOne
          Paleta paleta;
      
          @ManyToOne
          Jugador jugador;
      }
    #+END_SRC
*** Ejemplo
  #+BEGIN_SRC java
    @Entity
    public class Persona{
        @Id
        @GeneratedValue
        private Long id;

        private String nombre;
    }
  #+END_SRC
** Definir la Cardinalidad de una Relación
  #+BEGIN_SRC java
    @Entity
    public class Formacion{
        @Id
        @GeneratedValue
        private Long id;

        private String nombre;

        // manera práctica de no confundirse al armar la cardinalidad de la relación
        //
        // 1. Partimos la relación desde el tipo del atributo
        //  - por tanto "@...ToOne" porque el atributo "equipo" no es una lista
        //
        // 2. Leemos la relación desde el atributo a la clase, de derecha a izq.
        // - Equipo: @...ToOne     -> Una "formación" puede tener un "equipo"
        // - Formacion: @ManyTo... -> Un equipo puede estar en varias "formaciones" de varios "partidos"
        //
        //  concluimos ManyToOne
        @ManyToOne
        private Equipo equipo;

        // 1. Partimos retomando la misma idea, como el tipo del atributo es una colección sera "@...ToMany"
        //  - Sabemos que es @...ToMany
        //
        // 2. Leemos la relación desde el atributo al nombre la clase
        //  - Jugador: @...ToMany   -> un jugador puede estar en muchas formaciones de varios partidos
        //  - Formacion: @ManyTo... -> una formación puede tener varios jugadores
        //
        // concluimos ManyToMany
        @ManyToMany
        private List<Jugador> jugadores = new ArrayList<>();
    }
  #+END_SRC
** Persistir información
   #+BEGIN_SRC java
     // le pedimos formación con id=1
     final Formacion formacion = entityManager.find(Formacion.class, new Long(1));
     // declaramos la transacción
     final EntityTransaction transaction = entityManager.getTransaction();

     transaction.begin(); // <- iniciamos la transacción

     formacion.setGoles(new Long(11));
     Jugador jugador = new Jugador();
     jugador.setNombre("pepito");

     entityManager.persist(jugador); // <- lo persiste en la db, hará una query con INSERT

     System.out.pintln(jugador.getId()); // <- imprimimos el ID del jugador que persiste en la db

     transaction.commit(); // <- confirmamos la transacción
   #+END_SRC
** [#A] Persistir de forma consistente
   - El ~withTransaction~ se agrega en el *controller*
   - En el ~withTransaction~ se agregan las operaciones que generan efecto
   - El *controller* relaciona el Dominio(Modelo) con la Presentación (UI), es quien _dirige los Casos de Uso_
   
   #+BEGIN_SRC java
     alumno = new Alumno("Marcos");
     nota = new Nota(10);
     em.persist(alumno);
     em.persist(nota);
     // - Sin el withTransaction esta operación funciona, pero no es consistente
     // - Si persistimos fuera del withTransaction, es posible que el ORM Hibernate
     // nos comitee/confirme una transacción pendiente que no queríamos
     // alumno.getNotas().add(nota);
     
     // - Si agregamos las operaciones que tienen efecto en el withTransaction
     withTransaction(()->{
             alumno.getNotas().add(nota);
         });
   #+END_SRC
** Ejecutar Consultas
   #+BEGIN_SRC java
     public class Runner{
         public static void(String[] args){
             final EntityManager entityManager = PerThreadEntityManagers.getEntity.manager();

             // -> pedimos el jugador con id=2
             Jugador jugador = entityManager.find(Jugador.class, new Long(2));
             System.out.printLn(jugador.getId());
             System.out.printLn(jugador.getNombre());

             // -> creamos una consulta con notación sql
             Jugador otroJugador = (Jugador) entityManager
                 .createQuery("FROM Jugador WHERE nombre= 'pepito'")
                 .getSingleResult();
         }
     }
   #+END_SRC
** Pasar Parámetros a las Consultas
   - A la query le agregamos al valor como ~:nombreParametro~ y usamos el método ~setParameter("nombreParametro", nombreParametro)~
   - Se recomienda "NO CONCATENAR" los strings (/para evitar sql inject/)

   #+BEGIN_SRC java
     //
     public List<Jugador> filtrarPorNombre(String nombre){
         // -> creamos una consulta con notación sql
         return (Jugador) entityManager
             .createQuery("FROM Jugador WHERE nombre= :nombre")
             .setParameter("nombre", nombre)
             .getSingleResult();
     }
   #+END_SRC
** Cambiar la referencia a una tabla
   #+BEGIN_QUOTE
   Usamos el *annotation* ~@Table(name="nuevoNombreDeTabla")~ donde el ORM Hibernate al mapear el *modelo de objetos*
   si ve que NO existe en el *modelo de datos* entonces crea esa tabla.

   Pero.. Si existe otra tabla que hace referencia al nombre de tabla anterior, osea previo a que usaramos ese *annotation*,
   se sugiere cambiar el nombre directo desde la base de datos para evitar errores/inconsistencias con el ORM.
   #+END_QUOTE

   #+BEGIN_SRC java
     @Entity
     @Table(name= "jugadores") // <-- buscará en esta tabla en vez de la tabla "Jugador"
     public class Jugador{
         //...
     }
   #+END_SRC
** Main
   #+BEGIN_SRC java
     import java.util.List;
     
     import javax.persistence.EntityManager;
     import javax.persistence.EntityTransaction;
     
     import org.uqbarproject.jpa.java8.extras.PerThreadEntityManagers;
     import utn.dds.persistencia.futbol.persistence.Jugador;
     
     public class Main{
         public static void main(String[] args){
             final EntityManager entityManager = PerThreadEntityManagers.getEntityManager();
             EntityTransaction transaction = entityManager.getTransaction();
     
             /**
              ,* 1. Creamos una instancia de jugador, le asignamos los datos
              ,* 2. Persistimos al jugador dentro de una transacción
              ,* 3. Confirmamos la transacción
              ,*/
             // Jugador jugador = new Jugador();
             // jugador.setNombre("jorgito");
             // jugador.setPosicion("delantero");
     
             // transaction.begin();
             // entityManager.persist(jugador);
             // transaction.commit();
     
             /**
              ,* 1. Buscamos al objeto con id=3, y lo imprimimos
              ,* 2. Cambiamos sus datos y lo volvemos a imprimir
              ,* 3. Lo borramos de la base de datos (si estuviese relacionado con una FK, fallaría el DELETE)
              ,*/
             Jugador jugador = entityManager.find(Jugador.class, new Long(3));
             System.out.println(jugador.getNombre() + " " + jugador.getPosicion() + " " + jugador.getId());
     
             transaction.begin();
             jugador.setNombre("killme");
             transaction.commit();
     
             System.out.println(jugador.getNombre() + " " + jugador.getPosicion() + " " + jugador.getId());
     
             // Removemos el registro del objeto que se persistió
             transaction.begin();
             entityManager.remove(jugador);
             transaction.commit();
     
             /**
              ,* Imprimimos una lista de objetos
              ,*/
             final List<Jugador> jugadores = entityManager.createQuery("from Jugador").getResultList();
             for(Jugador jug : jugadores){
                 System.out.println(jug.getNombre() + "" + jug.getPosicion() + " " + jug.getId());
             }
         }
     }
   #+END_SRC
* Recursos
** Documentación de la Materia
   1. [[https://docs.google.com/document/d/1jWtehhVCFYECKvpdcCxnEgWZFCv2fR2WPyUJSoiX3II/edit#heading=h.n0vkh0jgorqn][Guia de ANotaciones de JPA]]
   2. [[https://github.com/dds-utn/jpa-proof-of-concept-template][Proyecto base de JPA (github)]]
   3. [[https://docs.google.com/document/d/1dYvrVLRbFE9qwuKj5biz9oRBaRzj-K6ujIKOXNan02s/edit#][Incorporar Hibernate a nuestro proyecto]]
   4. [[https://docs.google.com/document/d/1YLmp9vMnSzKg2emt3Bx564Tf1CLalShPc98Z8nCoi7s/edit][Mapeo Objetos Relacional]]
** Parciales Sugeridos
   1. [[https://docs.google.com/document/d/15ifQWQqfzbwwHIiiuoZiE4eyhd_DpmaQ5OGPvD9x2Wc/edit#heading=h.uyku9mnteh0t][(2018) Que Me Pongo]]
** Referencias Sugeridas en Clase
   1. https://github.com/jonybuzz/demo-hibernate
   2. [[https://www.objectdb.com/java/jpa/persistence/managed][Ciclo de vida de un objeto dentro del Entity Manager]]
   3. [[https://github.com/uqbar-project/jpa-java8-extras#schema-generation][Generar el schema.sql de JPA - github.com, UqbarProject]]
** Referencias externas
   1. [[https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html][Maven in five minutes - apache.org, Maven]]
   2. [[https://github.com/emacs-lsp/lsp-java/issues/98][Spacemacs run main class - github.com, Issue]]
